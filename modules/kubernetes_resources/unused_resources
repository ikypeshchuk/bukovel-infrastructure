# resource "kubernetes_namespace" "ingress_nginx" {
#   metadata {
#     name = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/instance" = "ingress-nginx"
#       "app.kubernetes.io/name"     = "ingress-nginx"
#     }
#   }
# }

# resource "kubernetes_service_account" "ingress_nginx_controller" {
#   automount_service_account_token = true
#   metadata {
#     name      = "ingress-nginx"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }
# }
# resource "kubernetes_service_account" "ingress_nginx_admission" {
#   metadata {
#     name      = "ingress-nginx-admission"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }
# }
# resource "kubernetes_role" "ingress_nginx" {
#   metadata {
#     name      = "ingress-nginx"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["namespaces"]
#     verbs      = ["get"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["configmaps", "pods", "secrets", "endpoints"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["services"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingresses"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingresses/status"]
#     verbs      = ["update"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingressclasses"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups     = ["coordination.k8s.io"]
#     resource_names = ["ingress-nginx-leader"]
#     resources      = ["leases"]
#     verbs          = ["get", "update"]
#   }

#   rule {
#     api_groups = ["coordination.k8s.io"]
#     resources  = ["leases"]
#     verbs      = ["create"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["events"]
#     verbs      = ["create", "patch"]
#   }

#   rule {
#     api_groups = ["discovery.k8s.io"]
#     resources  = ["endpointslices"]
#     verbs      = ["list", "watch", "get"]
#   }
# }
# resource "kubernetes_cluster_role" "ingress_nginx" {
#   metadata {
#     name = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/instance" = "ingress-nginx"
#       "app.kubernetes.io/name"     = "ingress-nginx"
#       "app.kubernetes.io/part-of"  = "ingress-nginx"
#       "app.kubernetes.io/version"  = "1.7.0"
#     }
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["configmaps", "endpoints", "nodes", "pods", "secrets", "namespaces"]
#     verbs      = ["list", "watch"]
#   }

#   rule {
#     api_groups = ["coordination.k8s.io"]
#     resources  = ["leases"]
#     verbs      = ["list", "watch"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["nodes"]
#     verbs      = ["get"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["services"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingresses"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = [""]
#     resources  = ["events"]
#     verbs      = ["create", "patch"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingresses/status"]
#     verbs      = ["update"]
#   }

#   rule {
#     api_groups = ["networking.k8s.io"]
#     resources  = ["ingressclasses"]
#     verbs      = ["get", "list", "watch"]
#   }

#   rule {
#     api_groups = ["discovery.k8s.io"]
#     resources  = ["endpointslices"]
#     verbs      = ["list", "watch", "get"]
#   }
# }
# resource "kubernetes_cluster_role" "ingress_nginx_admission" {
#   metadata {
#     name = "ingress-nginx-admission"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   rule {
#     api_groups = ["admissionregistration.k8s.io"]
#     resources  = ["validatingwebhookconfigurations"]
#     verbs      = ["get", "update"]
#   }
# }
# resource "kubernetes_role_binding" "ingress_nginx" {
#   metadata {
#     name      = "ingress-nginx"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   role_ref {
#     api_group = "rbac.authorization.k8s.io"
#     kind      = "Role"
#     name      = "ingress-nginx"
#   }

#   subject {
#     kind      = "ServiceAccount"
#     name      = "ingress-nginx"
#     namespace = "ingress-nginx"
#   }
# }
# resource "kubernetes_role_binding" "ingress_nginx_admission" {
#   metadata {
#     name      = "ingress-nginx-admission"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   role_ref {
#     api_group = "rbac.authorization.k8s.io"
#     kind      = "Role"
#     name      = "ingress-nginx-admission"
#   }

#   subject {
#     kind      = "ServiceAccount"
#     name      = "ingress-nginx-admission"
#     namespace = "ingress-nginx"
#   }
# }
# resource "kubernetes_cluster_role_binding" "ingress_nginx" {
#   metadata {
#     name = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/instance" = "ingress-nginx"
#       "app.kubernetes.io/name"     = "ingress-nginx"
#       "app.kubernetes.io/part-of"  = "ingress-nginx"
#       "app.kubernetes.io/version"  = "1.7.0"
#     }
#   }

#   role_ref {
#     api_group = "rbac.authorization.k8s.io"
#     kind      = "ClusterRole"
#     name      = "ingress-nginx"
#   }

#   subject {
#     kind      = "ServiceAccount"
#     name      = "ingress-nginx"
#     namespace = "ingress-nginx"
#   }
# }
# resource "kubernetes_cluster_role_binding" "ingress_nginx_admission" {
#   metadata {
#     name = "ingress-nginx-admission"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   role_ref {
#     api_group = "rbac.authorization.k8s.io"
#     kind      = "ClusterRole"
#     name      = "ingress-nginx-admission"
#   }

#   subject {
#     kind      = "ServiceAccount"
#     name      = "ingress-nginx-admission"
#     namespace = "ingress-nginx"
#   }
# }
# resource "kubernetes_config_map" "ingress_nginx_controller" {
#   metadata {
#     name      = "ingress-nginx-controller"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   data = {
#     "allow-snippet-annotations" = "true"
#     "use-proxy-protocol"        = "true"
#   }
# }
# resource "kubernetes_service" "ingress_nginx_controller" {
#   metadata {
#     name      = "ingress-nginx-controller"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }

#     annotations = {
#       "service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol" = "true"
#       "service.beta.kubernetes.io/do-loadbalancer-tags"                  = "lb-k8s,ingress-nginx-lb"
#       "service.beta.kubernetes.io/do-loadbalancer-name"                  = "ingress-nginx-lb"
#     }
#   }

#   spec {
#     external_traffic_policy = "Local"

#     ip_families = ["IPv4"]

#     ip_family_policy = "SingleStack"

#     selector = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#     }

#     type = "LoadBalancer"

#     port {
#       name        = "http"
#       port        = 80
#       protocol    = "TCP"
#       target_port = "http"
#     }

#     port {
#       name        = "https"
#       port        = 443
#       protocol    = "TCP"
#       target_port = "https"
#     }
#   }
# }
# resource "kubernetes_service" "ingress_nginx_controller_admission" {
#   metadata {
#     name      = "ingress-nginx-controller-admission"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   spec {
#     selector = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#     }

#     type = "ClusterIP"

#     port {
#       name        = "https-webhook"
#       port        = 443
#       protocol    = "TCP"
#       target_port = "webhook"
#     }
#   }
# }
# resource "kubernetes_deployment" "ingress_nginx_controller" {
#   metadata {
#     name      = "ingress-nginx-controller"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   spec {
#     min_ready_seconds      = 0
#     revision_history_limit = 10

#     selector {
#       match_labels = {
#         "app.kubernetes.io/component" = "controller"
#         "app.kubernetes.io/instance"  = "ingress-nginx"
#         "app.kubernetes.io/name"      = "ingress-nginx"
#       }
#     }

#     template {
#       metadata {
#         labels = {
#           "app.kubernetes.io/component" = "controller"
#           "app.kubernetes.io/instance"  = "ingress-nginx"
#           "app.kubernetes.io/name"      = "ingress-nginx"
#           "app.kubernetes.io/part-of"   = "ingress-nginx"
#           "app.kubernetes.io/version"   = "1.7.0"
#         }
#       }

#       spec {
#         container {
#           args = [
#             "/nginx-ingress-controller",
#             "--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller",
#             "--election-id=ingress-nginx-leader",
#             "--controller-class=k8s.io/ingress-nginx",
#             "--ingress-class=nginx",
#             "--configmap=$(POD_NAMESPACE)/ingress-nginx-controller",
#             "--validating-webhook=:8443",
#             "--validating-webhook-certificate=/usr/local/certificates/cert",
#             "--validating-webhook-key=/usr/local/certificates/key",
#           ]

#           env {
#             name = "POD_NAME"
#             value_from {
#               field_ref {
#                 field_path = "metadata.name"
#               }
#             }
#           }

#           env {
#             name = "POD_NAMESPACE"
#             value_from {
#               field_ref {
#                 field_path = "metadata.namespace"
#               }
#             }
#           }

#           env {
#             name  = "LD_PRELOAD"
#             value = "/usr/local/lib/libmimalloc.so"
#           }

#           image             = "registry.k8s.io/ingress-nginx/controller:v1.7.0@sha256:7612338342a1e7b8090bef78f2a04fffcadd548ccaabe8a47bf7758ff549a5f7"
#           image_pull_policy = "IfNotPresent"

#           lifecycle {
#             pre_stop {
#               exec {
#                 command = ["/wait-shutdown"]
#               }
#             }
#           }

#           liveness_probe {
#             failure_threshold     = 5
#             initial_delay_seconds = 10
#             period_seconds        = 10
#             success_threshold     = 1
#             timeout_seconds       = 1

#             http_get {
#               path   = "/healthz"
#               port   = 10254
#               scheme = "HTTP"
#             }
#           }

#           name = "controller"

#           port {
#             container_port = 80
#             name           = "http"
#             protocol       = "TCP"
#           }

#           port {
#             container_port = 443
#             name           = "https"
#             protocol       = "TCP"
#           }
#           port {
#             container_port = 8443
#             name           = "webhook"
#             protocol       = "TCP"
#           }
#           readiness_probe {
#             failure_threshold     = 3
#             initial_delay_seconds = 10
#             period_seconds        = 10
#             success_threshold     = 1
#             timeout_seconds       = 1

#             http_get {
#               path   = "/healthz"
#               port   = 10254
#               scheme = "HTTP"
#             }
#           }

#           resources {
#             requests = {
#               cpu    = "100m"
#               memory = "90Mi"
#             }
#           }

#           security_context {
#             allow_privilege_escalation = true

#             capabilities {
#               add  = ["NET_BIND_SERVICE"]
#               drop = ["ALL"]
#             }

#             run_as_user = 101
#           }

#           volume_mount {
#             mount_path = "/usr/local/certificates/"
#             name       = "webhook-cert"
#             read_only  = true
#           }
#         }

#         dns_policy = "ClusterFirst"

#         node_selector = {
#           "kubernetes.io/os" = "linux"
#         }

#         service_account_name = "ingress-nginx"

#         termination_grace_period_seconds = 300

#         volume {
#           name = "webhook-cert"

#           secret {
#             secret_name = "ingress-nginx-admission"
#           }
#         }
#       }
#     }
#   }
# }
# resource "kubernetes_ingress_class" "nginx" {
#   metadata {
#     name = "nginx"

#     labels = {
#       "app.kubernetes.io/component" = "controller"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   spec {
#     controller = "k8s.io/ingress-nginx"
#   }
# }
# resource "kubernetes_job" "ingress_nginx_admission_create" {
#   metadata {
#     name      = "ingress-nginx-admission-create"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   spec {
#     template {
#       metadata {
#         name = "ingress-nginx-admission-create"

#         labels = {
#           "app.kubernetes.io/component" = "admission-webhook"
#           "app.kubernetes.io/instance"  = "ingress-nginx"
#           "app.kubernetes.io/name"      = "ingress-nginx"
#           "app.kubernetes.io/part-of"   = "ingress-nginx"
#           "app.kubernetes.io/version"   = "1.7.0"
#         }
#       }

#       spec {
#         container {
#           args = [
#             "create",
#             "--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.ingress-nginx.svc", #$(POD_NAMESPACE).svc",
#             "--namespace=ingress-nginx",                                                                      #$(POD_NAMESPACE)",
#             "--secret-name=ingress-nginx-admission",
#           ]

#           env {
#             name = "POD_NAMESPACE"
#             value_from {
#               field_ref {
#                 field_path = "metadata.namespace"
#               }
#             }
#           }

#           image             = "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20230312-helm-chart-4.5.2-28-g66a760794@sha256:01d181618f270f2a96c04006f33b2699ad3ccb02da48d0f89b22abce084b292f"
#           image_pull_policy = "IfNotPresent"
#           name              = "create"

#           security_context {
#             allow_privilege_escalation = false
#           }
#         }

#         node_selector = {
#           "kubernetes.io/os" = "linux"
#         }

#         restart_policy = "OnFailure"

#         security_context {
#           fs_group        = 2000
#           run_as_non_root = true
#           run_as_user     = 2000
#         }

#         service_account_name = "ingress-nginx-admission"
#       }
#     }
#   }
# }
# resource "kubernetes_job" "ingress_nginx_admission_patch" {
#   metadata {
#     name      = "ingress-nginx-admission-patch"
#     namespace = "ingress-nginx"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   spec {
#     template {
#       metadata {
#         name = "ingress-nginx-admission-patch"

#         labels = {
#           "app.kubernetes.io/component" = "admission-webhook"
#           "app.kubernetes.io/instance"  = "ingress-nginx"
#           "app.kubernetes.io/name"      = "ingress-nginx"
#           "app.kubernetes.io/part-of"   = "ingress-nginx"
#           "app.kubernetes.io/version"   = "1.7.0"
#         }
#       }

#       spec {
#         container {
#           args = [
#             "patch",
#             "--webhook-name=ingress-nginx-admission",
#             "--namespace=ingress-nginx", #$(POD_NAMESPACE)",
#             "--patch-mutating=false",
#             "--secret-name=ingress-nginx-admission",
#             "--patch-failure-policy=Fail",
#           ]

#           env {
#             name = "POD_NAMESPACE"
#             value_from {
#               field_ref {
#                 field_path = "metadata.namespace"
#               }
#             }
#           }

#           image             = "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20230312-helm-chart-4.5.2-28-g66a760794@sha256:01d181618f270f2a96c04006f33b2699ad3ccb02da48d0f89b22abce084b292f"
#           image_pull_policy = "IfNotPresent"
#           name              = "patch"

#           security_context {
#             allow_privilege_escalation = false
#           }
#         }

#         node_selector = {
#           "kubernetes.io/os" = "linux"
#         }

#         restart_policy = "OnFailure"

#         security_context {
#           fs_group        = 2000
#           run_as_non_root = true
#           run_as_user     = 2000
#         }

#         service_account_name = "ingress-nginx-admission"
#       }
#     }
#   }
# }
# resource "kubernetes_validating_webhook_configuration" "ingress_nginx_admission" {
#   metadata {
#     name = "ingress-nginx-admission"

#     labels = {
#       "app.kubernetes.io/component" = "admission-webhook"
#       "app.kubernetes.io/instance"  = "ingress-nginx"
#       "app.kubernetes.io/name"      = "ingress-nginx"
#       "app.kubernetes.io/part-of"   = "ingress-nginx"
#       "app.kubernetes.io/version"   = "1.7.0"
#     }
#   }

#   webhook {
#     admission_review_versions = ["v1"]
#     client_config {
#       service {
#         name      = "ingress-nginx-controller-admission"
#         namespace = "ingress-nginx"
#         path      = "/networking/v1/ingresses"
#       }
#     }

#     failure_policy = "Fail"
#     match_policy   = "Equivalent"
#     name           = "validate.nginx.ingress.kubernetes.io"

#     rule {
#       api_groups   = ["networking.k8s.io"]
#       api_versions = ["v1"]
#       operations   = ["CREATE", "UPDATE"]
#       resources    = ["ingresses"]
#     }

#     side_effects    = "None"
#     timeout_seconds = 29
#   }
# }

# resource "kubernetes_manifest" "ingress_nginx_lb" {
#   depends_on = [null_resource.wait_for_credentials]
#   provider   = kubernetes
#   manifest = {
#     "apiVersion" = "v1"
#     "kind"       = "Service"
#     "metadata" = {
#       "name"      = "ingress-nginx-lb"
#       "namespace" = "default"
#       "annotations" = {
#         "service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol" = "true"
#         "service.beta.kubernetes.io/do-loadbalancer-tags"                  = "lb-k8s,ingress-nginx-lb"
#         "service.beta.kubernetes.io/do-loadbalancer-name"                  = "ingress-nginx-lb"
#       }
#     }
#     "spec" = {
#       "selector" = {
#         "app.kubernetes.io/name" = "ingress-nginx"
#       }
#       "ports" = [
#         {
#           "name"       = "http"
#           "port"       = 80
#           "targetPort" = "http"
#         },
#         {
#           "name"       = "https"
#           "port"       = 443
#           "targetPort" = "https"
#         },
#       ]
#       "type" = "LoadBalancer"
#     }
#   }

#   count = local.kubeconfig_exists ? 1 : 0
#   timeouts {
#     create = "10m"
#     update = "10m"
#     delete = "30s"
#   }
# }